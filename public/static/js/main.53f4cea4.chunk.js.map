{"version":3,"sources":["queries/animeQueries.js","utilities/index.js","components/AnimeListItem/AnimeListItem.js","components/Loader/Loading.js","components/AnimeList/AnimeList.js","components/AnimeListContainer/AnimeListContainer.js","components/AnimeSingle/AnimeSingle.js","App.js","serviceWorker.js","index.js"],"names":["getAnimesQuery","gql","_templateObject","getAnimeQuery","_templateObject2","transformDate","s","moment","format","AnimeListItem","_ref","_ref$anime","anime","id","_ref$anime$attributes","attributes","synopsis","canonicalTitle","startDate","endDate","ageRating","small","posterImage","showType","react_default","a","createElement","className","src","alt","concat","toUpperCase","trimmedString","substr","Math","min","length","lastIndexOf","trimSynopsis","react_router_dom","to","Loading","role","AnimeList","props","lib_default","dataLength","animes","next","onLoadMore","hasMore","scrollThreshold","loader","Loader_Loading","style","overflow","endMessage","map","components_AnimeListItem_AnimeListItem","key","AnimeListContainer","state","offset","react_apollo_esm","query","variables","this","loading","error","data","fetchMore","console","log","components_AnimeList_AnimeList","entries","updateQuery","prev","_ref2","fetchMoreResult","Object","assign","toConsumableArray","Component","AnimeSingle","match","params","parseInt","_data$anime$attribute","tiny","styles","backgroundImage","coverImage","large","backgroundPosition","backgroundRepeat","backgroundSize","height","backgroundBlendMode","backgroundColor","react","onClick","history","goBack","replace","client","ApolloClient","uri","App","react_router","path","component","exact","href","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53f4cea4.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nconst getAnimesQuery = gql`\n  query getAnimes($offset: Int){\n    animes(offset: $offset) {\n      id\n      attributes {\n        synopsis\n        canonicalTitle\n        startDate\n        endDate\n        ageRating\n        posterImage {\n          small\n        }\n        showType\n      }\n    }\n  }\n`;\n\nconst getAnimeQuery = gql`\n  query getAnime($id: ID){\n    anime(id: $id) {\n      id\n      attributes {\n        synopsis\n        canonicalTitle\n        startDate\n        endDate\n        ageRating\n        posterImage {\n          tiny\n        }\n        coverImage {\n          large\n        }\n        showType\n      }\n    }\n  }\n`\n\nexport { getAnimesQuery, getAnimeQuery };","import moment from 'moment';\n\nconst transformDate = (s) => {\n  return moment(s).format('MMM do YYYY')\n}\n\nconst trimSynopsis = (s) => {\n  var maxLength = 200 // maximum number of characters to extract\n\n  //trim the string to the maximum length\n  var trimmedString = s.substr(0, maxLength);\n\n  //re-trim if we are in the middle of a word\n  return trimmedString = trimmedString.substr(0, Math.min(trimmedString.length, trimmedString.lastIndexOf(\" \")))\n}\n\nexport { transformDate, trimSynopsis }","import React from 'react'\nimport { transformDate, trimSynopsis } from '../../utilities';\nimport { Link } from 'react-router-dom';\nimport './AnimeListItem.css'\n\nconst AnimeListItem = ({anime: {\n  id,\n  attributes: {\n    synopsis, \n    canonicalTitle, \n    startDate, \n    endDate, \n    ageRating, \n    posterImage: {\n      small\n    },\n    showType\n  }\n}}) => {\n\n  return (\n    <div className=\"col-md-6 col-lg-4 col-xl-3 card\">\n      <img src={small} alt={`${canonicalTitle} poster.`} className=\"img-fluid\" />\n      <div className=\"card-body\">\n        <h3 className=\"card-title font-weight-bold\">{canonicalTitle}</h3>\n        <hr/>\n        <div className=\"text-left card-details\">\n          Rated: <span className=\"badge badge-dark text-orange\">{ageRating}</span><br/>\n          Type: <span className=\"badge badge-dark text-orange\">{showType.toUpperCase()}</span><br />\n          From: <span className=\"badge badge-success text-left\">{transformDate(startDate)}</span><br/>\n          To: <span className=\"badge badge-danger text-left\">{transformDate(endDate)}</span>\n        </div>\n        <hr/>\n        <p className=\"card-text\">{`${trimSynopsis(synopsis)}...`}</p>\n        <Link to={`anime/${id}`} className=\"btn btn-maroon\">Read Full Synopsis</Link>\n      </div>\n    </div>\n  )\n\n}\n\nexport default AnimeListItem\n","import React from 'react'\n\nconst Loading = () => {\n  return (\n    <div className=\"spinner-border text-light mx-auto overflow-hidden\" role=\"status\">\n      <span className=\"sr-only\">Loading...</span>\n    </div>\n  )\n}\n\nexport default Loading\n","import React from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport AnimeListItem from '../AnimeListItem/AnimeListItem';\nimport Loading from '../Loader/Loading';\n\nconst AnimeList = (props) => {\n  return (\n    <InfiniteScroll\n      dataLength={props.animes.length}\n      next={props.onLoadMore}\n      hasMore={true}\n      scrollThreshold={.99}\n      loader={<Loading />}\n      className=\"row\"\n      style={{'overflow': 'hidden'}}\n      endMessage={<p>Done</p>}\n    >\n      {props.animes.map((anime) => (\n        <AnimeListItem key={anime.id} anime={anime} />\n      ))}\n    </InfiniteScroll>\n  )\n}\n\nexport default AnimeList\n\n","import React, { Component } from 'react';\nimport { Query } from 'react-apollo';\nimport { getAnimesQuery } from '../../queries/animeQueries';\nimport AnimeList from '../AnimeList/AnimeList';\nimport Loading from '../Loader/Loading';\n\nclass AnimeListContainer extends Component {\n  state = {\n    offset: 0 // offset num to pass when querying for anime list\n  }\n  render() {\n    return (\n      <Query query={getAnimesQuery} variables={{ offset: this.state.offset }}>\n        {({ loading, error, data, fetchMore }) => {\n          if (loading) return <Loading/>\n          if (error) console.log(error);\n          return (\n            <AnimeList\n              animes={data.animes}\n              entries={data.animes || []}\n              onLoadMore={() =>\n                fetchMore({\n                  variables: {\n                    offset: data.animes.length\n                  },\n                  updateQuery: (prev, { fetchMoreResult }) => {\n                    if (!fetchMoreResult) return prev;\n                    return Object.assign({}, prev, {\n                      animes: [...prev.animes, ...fetchMoreResult.animes]\n                    });\n                  }\n                })\n              }\n            />\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default AnimeListContainer\n","import React, { Fragment } from 'react'\nimport { Query } from 'react-apollo';\nimport { transformDate } from '../../utilities';\nimport { getAnimeQuery } from '../../queries/animeQueries';\nimport Loading from '../Loader/Loading';\nimport './AnimeSingle.css';\n\nconst AnimeSingle = (props) => {\n  let { id } = props.match.params;\n  id = parseInt(id);\n\n  const goBack = () => {\n    props.history.goBack();\n  }\n\n  return (\n    <Query query={getAnimeQuery} variables={{ id }}>\n      {({ loading, error, data }) => {       \n        if (loading) return <Loading />;\n        if (error) console.log(error);\n\n        const {\n          attributes: {synopsis,canonicalTitle,startDate,endDate,ageRating,posterImage:{tiny},showType}\n        } = data.anime;\n\n        const styles = {\n              'backgroundImage': (data.anime.attributes.coverImage) ? `url(${data.anime.attributes.coverImage.large})` : null,\n              'backgroundPosition': 'center',\n              'backgroundRepeat': 'no-repeat',\n              'backgroundSize': 'cover',\n              'height': '260px',\n              'backgroundBlendMode': 'overlay',\n              'backgroundColor': 'rgba(0, 0, 0, 0.8)',\n            }\n        \n        return (\n          <Fragment>\n            <div className=\"row mb-2\">\n              <div className=\"col-12\">\n                <div className=\"animeCover\" style={styles}>\n                  <h1>{canonicalTitle}</h1>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md-4 pr-1\">\n                <div className=\"p-2 bg-white\">\n                  <img src={tiny} alt=\"\" /><br/>\n                  Rating: <span className=\"badge badge-dark text-orange\">{ageRating}</span><br/>\n                  Type: <span className=\"badge badge-dark text-orange\">{showType}</span><br/>\n                  From: <span className=\"badge badge-success\">{transformDate(startDate)}</span><br/>\n                  To: <span className=\"badge badge-danger\">{transformDate(endDate)}</span><br/>\n                  <hr/>\n                  <button onClick={() => goBack()} className=\"btn btn-outline-danger btn-sm text-center\">&larr; Go Back</button>\n                </div>\n              </div>\n              <div className=\"col-md-8 pl-0\">\n                <div className=\"p-5 bg-white\">\n                  <h2>Synopsis</h2>\n                  <p className=\"prewrap\">{synopsis.replace(/(?:\\r\\n|\\r|\\n)/g, \"\\n\\n\")}</p>\n                </div>\n              </div>\n            </div>\n          </Fragment>\n        );\n      }}\n    </Query>\n  )\n}\n\nexport default AnimeSingle\n","import React from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { Switch, Route } from 'react-router-dom';\nimport AnimeListContainer from './components/AnimeListContainer/AnimeListContainer';\nimport AnimeSingle from './components/AnimeSingle/AnimeSingle';\n\n// apollo client setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <nav className=\"navbar\">\n        <span className=\"navbar-brand mb-0 h1\">-Kushon-<i className=\"tagline\">A collection of animes</i></span>\n      </nav>\n      <div className=\"App container mb-5\">\n        <Switch>\n          <Route path=\"/anime/:id\" component={AnimeSingle} />\n          <Route exact path=\"/\" component={AnimeListContainer} />\n        </Switch>\n      </div>\n      <footer className=\"text-center\">Powered by the <a href=\"https://kitsu.docs.apiary.io/#\">Kitsu API</a></footer>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>, \n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}